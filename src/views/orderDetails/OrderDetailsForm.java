/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.orderDetails;

import controllers.ItemController;
import controllers.OrderController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Order;
import models.OrderDetails;
import views.main.MainForm;


/**
 *
 * @author lahiru (PK)
 */
public class OrderDetailsForm extends javax.swing.JFrame {

    /**
     * Creates new form OderDetailsForm
     */
    public OrderDetailsForm() {
        initComponents();
        setOrderID();
        setDate();
        setCustomerID();
        setItemCode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        idCB = new javax.swing.JComboBox<>();
        nameTxt = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        codeCB = new javax.swing.JComboBox<>();
        descriptionTxt = new javax.swing.JTextField();
        qtOnHandTxt = new javax.swing.JTextField();
        rqtTxt = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        addBtn = new javax.swing.JButton();
        priceTxt = new javax.swing.JTextField();
        removeBtn = new javax.swing.JButton();
        orlbl = new javax.swing.JLabel();
        daLbl = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        totalLbl = new javax.swing.JLabel();
        plaseOrderBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        oderIDLbl = new javax.swing.JLabel();
        oderDateLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Plase Order");

        idCB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        nameTxt.setEditable(false);
        nameTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameTxt.setForeground(new java.awt.Color(204, 0, 0));
        nameTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameTxt.setText("Name");

        codeCB.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        descriptionTxt.setEditable(false);
        descriptionTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        descriptionTxt.setForeground(new java.awt.Color(204, 0, 0));
        descriptionTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        descriptionTxt.setText("Description");

        qtOnHandTxt.setEditable(false);
        qtOnHandTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        qtOnHandTxt.setForeground(new java.awt.Color(204, 0, 0));
        qtOnHandTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qtOnHandTxt.setText("QT on Hand");

        rqtTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rqtTxt.setForeground(new java.awt.Color(0, 0, 204));
        rqtTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rqtTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rqtTxtActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(0, 204, 0));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addBtn.setForeground(new java.awt.Color(0, 0, 0));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        priceTxt.setEditable(false);
        priceTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        priceTxt.setForeground(new java.awt.Color(204, 0, 0));
        priceTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        priceTxt.setText("Price");

        removeBtn.setBackground(new java.awt.Color(255, 0, 0));
        removeBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeBtn.setForeground(new java.awt.Color(0, 0, 0));
        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        orlbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        orlbl.setText("Order ID     :");

        daLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        daLbl.setText("Order Date : ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Req QT :");

        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Qty", "Unit Price", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTbl);
        if (orderTbl.getColumnModel().getColumnCount() > 0) {
            orderTbl.getColumnModel().getColumn(0).setResizable(false);
            orderTbl.getColumnModel().getColumn(0).setPreferredWidth(20);
            orderTbl.getColumnModel().getColumn(1).setResizable(false);
            orderTbl.getColumnModel().getColumn(1).setPreferredWidth(150);
            orderTbl.getColumnModel().getColumn(2).setResizable(false);
            orderTbl.getColumnModel().getColumn(2).setPreferredWidth(20);
            orderTbl.getColumnModel().getColumn(3).setResizable(false);
            orderTbl.getColumnModel().getColumn(3).setPreferredWidth(30);
            orderTbl.getColumnModel().getColumn(4).setResizable(false);
            orderTbl.getColumnModel().getColumn(4).setPreferredWidth(30);
        }

        totalLbl.setBackground(new java.awt.Color(65, 65, 65));
        totalLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        totalLbl.setForeground(new java.awt.Color(204, 0, 0));
        totalLbl.setText("Total : 0");

        plaseOrderBtn.setBackground(new java.awt.Color(0, 204, 0));
        plaseOrderBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        plaseOrderBtn.setForeground(new java.awt.Color(0, 0, 0));
        plaseOrderBtn.setText("Plase Order");
        plaseOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plaseOrderBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(255, 0, 0));
        clearBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(0, 0, 0));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        oderIDLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        oderIDLbl.setForeground(new java.awt.Color(204, 0, 0));

        oderDateLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        oderDateLbl.setForeground(new java.awt.Color(204, 0, 0));

        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(daLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(orlbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(oderDateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(oderIDLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rqtTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addBtn)
                                .addGap(18, 18, 18)
                                .addComponent(removeBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idCB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(codeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(descriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(priceTxt)
                                    .addGap(18, 18, 18)
                                    .addComponent(qtOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(totalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backBtn)
                                .addGap(18, 18, 18)
                                .addComponent(clearBtn)
                                .addGap(18, 18, 18)
                                .addComponent(plaseOrderBtn)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(oderIDLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(daLbl)
                            .addComponent(oderDateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(removeBtn)
                    .addComponent(rqtTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalLbl)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(plaseOrderBtn)
                        .addComponent(clearBtn)
                        .addComponent(backBtn)))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        rqtTxtActionPerformed(evt);
    }//GEN-LAST:event_addBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) orderTbl.getModel();
        switch (orderTbl.getSelectedRowCount()) {
            case 1 -> {
                try {
                    
                    int result = JOptionPane.showConfirmDialog(this,
                            "Are You Sure?\nYou Want To Remove This Item Row\nOr This Quantity?",
                            "Conform",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE
                    );
                    
                    if(rqtTxt.getText().equals("")) {
                        if(result == JOptionPane.YES_OPTION) {
                            changeTotal();
                            tblModel.removeRow(orderTbl.getSelectedRow());
                        }
                        clearItems();
                        
                    } else {
                        int rqt = Integer.parseInt(rqtTxt.getText());
                        int qt = Integer.parseInt(orderTbl.getValueAt(orderTbl.getSelectedRow(),2).toString());
                        
                        if(qt == rqt) {
                            if(result == JOptionPane.YES_OPTION) {
                                changeTotal();
                                tblModel.removeRow(orderTbl.getSelectedRow());
                            }
                            clearItems();
                            
                        } else if(qt>rqt) {
                            tblModel.setValueAt(String.valueOf(qt-rqt),
                                    orderTbl.getSelectedRow(),
                                    2
                            );
                            double price = Double.parseDouble(orderTbl.getValueAt(orderTbl.getSelectedRow(), 3).toString());
                            tblModel.setValueAt(String.valueOf((qt-rqt)*price),
                                    orderTbl.getSelectedRow(),
                                    4
                            );
                            
                            setTotal(getTotal()-(rqt*price));
                            clearItems();
                            
                        } else {
                            warningMessege("Invalide Req QT Value !");
                        }
                        
                    }
                    
                } catch(NumberFormatException ex) {
                    warningMessege("Enter Integer Value In To Req QT !");
                }
            }
                
            case 0 -> warningMessege("You Must Select Row You Want To Remove !");
                
            default -> warningMessege("You Can Remove Items One By One !");
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void plaseOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plaseOrderBtnActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) orderTbl.getModel();
        if(idCB.getSelectedIndex()>0) {
            if(dtm.getRowCount()>0) {
                String orderID = oderIDLbl.getText();
                String date = oderDateLbl.getText();
                String customerID = String.valueOf(idCB.getSelectedItem());
                ArrayList<OrderDetails> OrderDetailsList = new ArrayList<OrderDetails>();

                for(int i=0;i<dtm.getRowCount();i++) {
                    String itemCode = String.valueOf(dtm.getValueAt(i,0));
                    int qty = Integer.parseInt(dtm.getValueAt(i,2).toString());
                    double price = Double.parseDouble(dtm.getValueAt(i,3).toString());
                    OrderDetailsList.add(new OrderDetails(orderID,itemCode,qty,price));
                }
                Order order = new Order(orderID,date,customerID,OrderDetailsList);
                
                try {
                    if(new OrderController().addNewOrder(order)) {
                        JOptionPane.showMessageDialog(this,
                                "Added Successfully",
                                "Information",
                                JOptionPane.INFORMATION_MESSAGE
                        );
                        clearBtnActionPerformed(evt);
                    
                    } else {
                        warningMessege("Try Again !");
                    }
                    
                } catch (ClassNotFoundException | SQLException ex) {
                    warningMessege(ex.getMessage());
                } 
                
            } else  {
                warningMessege("Select At Least One Item !");
            }
        } else {
            warningMessege("Select Customer !");
        } 
    }//GEN-LAST:event_plaseOrderBtnActionPerformed

    private void rqtTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rqtTxtActionPerformed
        if (codeCB.getSelectedIndex() != 0) {
            try {
                String code = codeCB.getSelectedItem().toString();
                String description = descriptionTxt.getText();
                String priceStr = getNumbers(priceTxt.getText());
                String qt = getNumbers(qtOnHandTxt.getText());
                String rqt = rqtTxt.getText();
                
                int rqItemCount = Integer.parseInt(rqt);
                double priceDob = Double.parseDouble(priceStr);
                double totalDob = rqItemCount * priceDob;
                int qItemCount = Integer.parseInt(qt);
                
                String totalStr = String.valueOf(totalDob);
                
                if (rqItemCount > 0 && qItemCount >= rqItemCount) {
                    DefaultTableModel tblModel = (DefaultTableModel) orderTbl.getModel();
                    boolean codeExist = false;
                    
                    for(int i=0;i<tblModel.getRowCount();i++) {
                        if(code.equals(tblModel.getValueAt(i, 0).toString())) {
                            rqItemCount = rqItemCount + Integer.parseInt(tblModel.getValueAt(i, 2).toString());
                            if(rqItemCount > 0 && qItemCount >= rqItemCount) {
                                totalDob = Double.parseDouble(tblModel.getValueAt(i, 3).toString()) * rqItemCount;
                                tblModel.setValueAt(String.valueOf(rqItemCount), i, 2);
                                tblModel.setValueAt(String.valueOf(totalDob), i, 4);
                                setTotal((Integer.parseInt(rqt) * priceDob) + getTotal());
                                clearItems();
                                
                            } else {
                                warningMessege("This Req QT Is Not Available !");
                            }
                            codeExist = true;
                            break;
                        }
                    }
                    
                    if(!codeExist) {
                        String[] data = {code,description,rqt,priceStr,totalStr};
                        tblModel.addRow(data);
                        setTotal(totalDob+getTotal());
                        clearItems();
                    }
                
                } else {
                    warningMessege("This Req QT Is Not Available !");
                }
                
            } catch (NumberFormatException ex) {
                warningMessege("Enter Integer Value In To Req QT !");
            }
 
        } else {
            warningMessege("Select Item Code !");
        }
    }//GEN-LAST:event_rqtTxtActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        setOrderID();
        setDate();
        idCB.setSelectedIndex(0);
        clearItems();
        DefaultTableModel tblModel = (DefaultTableModel) orderTbl.getModel();
        for(int i=0;i<tblModel.getRowCount();i++) {
            tblModel.removeRow(i);
        }
        for(int i=0;i<tblModel.getRowCount();i++) {
            tblModel.removeRow(i);
        }
        totalLbl.setText("Total :");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        dispose();
        MainForm main = new MainForm();
        main.setLocationRelativeTo(null);
        main.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox<String> codeCB;
    private javax.swing.JLabel daLbl;
    private javax.swing.JTextField descriptionTxt;
    private javax.swing.JComboBox<String> idCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel oderDateLbl;
    private javax.swing.JLabel oderIDLbl;
    private javax.swing.JTable orderTbl;
    private javax.swing.JLabel orlbl;
    private javax.swing.JButton plaseOrderBtn;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JTextField qtOnHandTxt;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTextField rqtTxt;
    private javax.swing.JLabel totalLbl;
    // End of variables declaration//GEN-END:variables

    // Set Order ID
    private void setOrderID() {
        
        try {
            String lastOrderID = new OrderController().getLastOrderId();
            if (lastOrderID != null) {
                lastOrderID = lastOrderID.split("[A-Z]")[1]; // D001==> 001
                lastOrderID = String.format("D%03d",(Integer.parseInt(lastOrderID)+1));
                oderIDLbl.setText(lastOrderID);
                
            } else {
                oderIDLbl.setText("D001");
            } 
            
        } catch (SQLException | ClassNotFoundException ex) {
            warningMessege(ex.getMessage());
        }
        
    }
    
    // Set Date
    private void setDate() {
        oderDateLbl.setText(LocalDate.now().toString());
    }
    
    // Set Customer IDs
    private void setCustomerID() {
        try {
            idCB.addItem("Select ID");
            for(int i=0;i<new OrderController().getCustomerID().length;i++) {
                idCB.addItem(new OrderController().getCustomerID()[i]);
            }
            
            idCB.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        String name = new OrderController().getCustomerName(idCB.getSelectedItem().toString());
                        nameTxt.setText((name == null) ? "Name" : name);
                        
                    } catch (ClassNotFoundException | SQLException ex) {
                        warningMessege(ex.getMessage());
                    }
                }
            });
            
        } catch (ClassNotFoundException | SQLException ex) {
            warningMessege(ex.getMessage());
        }
    }

    // Set Item Codes
    private void setItemCode() {
        try {
            codeCB.addItem("Select Code");
            for(int i=0;i<new OrderController().getItemCode().length;i++) {
                codeCB.addItem(new OrderController().getItemCode()[i]);
            }
            
            codeCB.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        String description = new OrderController().getItemDetails(codeCB.getSelectedItem().toString())[0];
                        String price = new OrderController().getItemDetails(codeCB.getSelectedItem().toString())[1];
                        String qt = new OrderController().getItemDetails(codeCB.getSelectedItem().toString())[2];
                        if (description != null && price != null && qt != null) {
                            descriptionTxt.setText(description);
                            priceTxt.setText("Rs : "+price);
                            qtOnHandTxt.setText("Qt : "+qt);
                            
                        } else {
                            descriptionTxt.setText("Description");
                            priceTxt.setText("Price");
                            qtOnHandTxt.setText("QT on Hand");
                        }
                        
                    } catch (ClassNotFoundException | SQLException ex) {
                        warningMessege(ex.getMessage());
                    }
                }
            });
            
        } catch (ClassNotFoundException | SQLException ex) {
            warningMessege(ex.getMessage());
        }
    }
    
    // Remove strings in string value
    private String getNumbers(String string) {
        string = string.replaceAll("[^0-9]", " ");
        string = string.trim();
        string = string.replaceAll(" +", ".");
        return string;
    }
    
    // Clear Items With All
    private void clearItems() {
        codeCB.setSelectedIndex(0);
        rqtTxt.setText("");
    }
    
    // Get Total 
    private double getTotal() {
        Pattern p = Pattern.compile("(\\d+(?:\\.\\d+))");
        Matcher m = p.matcher(totalLbl.getText());
        double total = 0;
        while(m.find()) {
            total = Double.parseDouble(m.group(1));
        }
        return total;
    }
    
    // Set Total 
    private void setTotal(double total) {
        totalLbl.setText("Total : "+String.valueOf(total));
    }
    
    // Chenge Total
    private void changeTotal() {
        DefaultTableModel tblModel = (DefaultTableModel) orderTbl.getModel();
        setTotal(getTotal() - Double.parseDouble(
                tblModel.getValueAt(
                    orderTbl.getSelectedRow(),4
                ).toString()
            )
        );
    }
    
    // Warning Messege
    private void warningMessege(String messege) {
        JOptionPane.showMessageDialog(this,
                messege,
                "WARNING",
                JOptionPane.WARNING_MESSAGE
        );
    }
    
}
